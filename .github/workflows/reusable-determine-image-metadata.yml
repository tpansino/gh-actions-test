---
name: "Determine Image Metadata"

on:
  workflow_call:
    inputs:
      image:
        description: "Name of image to build (eg: my-container)"
        type: string
        required: true
    outputs:
      branch-image-tag:
        description: "The image tag determined by the branch name."
        value: ${{ jobs.determine-image-metadata.outputs.branch-image-tag }}
      commit-image-tag:
        description: "The image tag determined by the Git commit SHA."
        value: ${{ jobs.determine-image-metadata.outputs.commit-image-tag }}
      image-tags:
        description: "All determined image tags to apply to the built image."
        value: ${{ jobs.determine-image-metadata.outputs.image-tags }}
      cache-image-tags:
        description: "All determined image tags to use for populating the build cache."
        value: ${{ jobs.determine-image-metadata.outputs.cache-image-tags }}
      image-labels:
        description: "All determined image labels."
        value: ${{ jobs.determine-image-metadata.outputs.image-labels }}
      image-name:
        description: "Name of image."
        value: ${{ inputs.image }}

defaults:
  run:
    shell: bash

jobs:
  determine-image-metadata:
    name: Determine Image Metadata
    runs-on: ubuntu-20.04
    outputs:
      commit-image-tag: ${{ steps.determine-image-tags.outputs.commit-image-tag }}
      branch-image-tag: ${{ steps.determine-image-tags.outputs.branch-image-tag }}
      image-tags: ${{ steps.determine-image-tags.outputs.image-tags }}
      cache-image-tags: ${{ steps.determine-image-tags.outputs.cache-image-tags }}
      image-labels: ${{ steps.determine-image-labels.outputs.labels }}
    steps:
      - name: Determine image tags
        id: determine-image-tags
        uses: actions/github-script@v6
        with:
          debug: ${{ secrets.ACTIONS_STEP_DEBUG || false }}
          script: |

            const imageName = "${{ inputs.image }}";

            var imageTags = {
              "commit": "",
              "branchForTagging": "",
              "branchForCaching": "",
            };
            /*
            // Pull requests events are tricky
            if (context.eventName === "pull_request") {

              // If the PR was closed and merged, then the event SHA will be that of the merge commit
              // (or squash commit) and the event base ref contains the name of the branch we merged into
              if (context.payload.action === "closed" && context.payload.pull_request.merged) {
                imageTags.commit = "commit-" + context.sha;
                imageTags.branchForTagging = "branch-" + context.payload.pull_request.base.ref;
                imageTags.branchForCaching = "branch-" + context.payload.pull_request.head.ref;
              }

              // If the PR was opened, synchronized (from a push), or reopened,
              // then the event SHA will be that of the merge commit (or squash commit)
              // and the event base ref contains the name of the branch we merged into
              else if (["opened", "synchronize", "reopened"].includes(context.payload.action)) {
                imageTags.commit = "commit-" + context.payload.pull_request.head.sha;
                imageTags.branchForTagging = "branch-" + context.payload.pull_request.head.ref;
                imageTags.branchForCaching = "branch-" + context.payload.pull_request.base.ref;
              }

              // Anything else, we didn't test, so error and don't output any tags
              else {
                core.setFailed(`Unsupported pull_request event type '${context.payload.action}'`);
              }
            }

            // Push events are easy, just grab the SHA and ref name from the github context
            else if (context.eventName === "push") {
              imageTags.commit = "commit-" + context.sha;
              imageTags.branchForTagging = "branch-" + context.ref;
              imageTags.branchForCaching = "branch-" + context.ref;
            }

            // Anything else, we didn't test, so error and don't output any tags
            else {
              core.setFailed(`Unsupported event_name '${context.eventName}'`);
            }

            // Sanitize the tags of any illegal characters for Docker image tags
            for (const tagName in imageTags) {
              imageTags[tagName]= imageTags[tagName]replace(/[^a-zA-Z0-9._-]+/g, '-');
            }

            // Assemble the result object (filtering out any empty tags)
            var result = {
              "commit-image-tag": `${imageName}:${imageTags.commit}`,
              "branch-image-tag": `${imageName}:${imageTags.branchForTagging}`,
              "image-tags": [
                `${imageName}:${imageTags.commit}`,
                `${imageName}:${imageTags.branchForTagging}`,
              ],
              "cache-image-tags": [
                `${imageName}:${imageTags.commit}`,
                `${imageName}:${imageTags.branchForTagging}`,
                `${imageName}:${imageTags.branchForCaching}`,
                `${imageName}:latest`,
              ],
            };

            if (context.payload.repository.default_branch === context.ref) {
              result.imageTags.append(`${imageName}:latest`);
            }

            // Print outputs to actions log for debugging
            core.setGroup("Outputs")
            for (const outputName in result) {
              core.info(`${outputName}: ` + JSON.stringify(result[outputName], undefined, 2));
              core.setOutput(outputName, result[outputName]);
            }
            core.endGroup()
            */

      - name: Determine image labels
        id: determine-image-labels
        # We tried using this action to generate both labels AND tags, but it
        # has missing/weird functionality on pull request events that make it not very useful
        # for our Docker build caching pattern. So now we just use it for labels.
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.image }}
